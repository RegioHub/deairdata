[{"path":"https://regiohub.github.io/deairdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Long Nguyen Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://regiohub.github.io/deairdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Long Nguyen. Author, maintainer.","code":""},{"path":"https://regiohub.github.io/deairdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nguyen L (2025). deairdata: API Wrapper Access Air Data German Environment Agency (Umweltbundesamt). R package version 0.2.0, https://github.com/long39ng/deairdata.","code":"@Manual{,   title = {deairdata: API Wrapper to Access Air Data from the German Environment Agency (Umweltbundesamt)},   author = {Long Nguyen},   year = {2025},   note = {R package version 0.2.0},   url = {https://github.com/long39ng/deairdata}, }"},{"path":"https://regiohub.github.io/deairdata/index.html","id":"deairdata","dir":"","previous_headings":"","what":"API Wrapper to Access Air Data from the German Environment Agency (Umweltbundesamt)","title":"API Wrapper to Access Air Data from the German Environment Agency (Umweltbundesamt)","text":"{deairdata} wrapper around public API provides access air quality data German Environment Agency (Umweltbundesamt).","code":""},{"path":"https://regiohub.github.io/deairdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"API Wrapper to Access Air Data from the German Environment Agency (Umweltbundesamt)","text":"can install development version deairdata like :","code":"remotes::install_github(\"long39ng/deairdata\")"},{"path":"https://regiohub.github.io/deairdata/reference/air_annual.html","id":null,"dir":"Reference","previous_headings":"","what":"Get annual tabulations — air_annual","title":"Get annual tabulations — air_annual","text":"Returns annual balances component station","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_annual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get annual tabulations — air_annual","text":"","code":"air_annual(component, year)"},{"path":"https://regiohub.github.io/deairdata/reference/air_annual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get annual tabulations — air_annual","text":"component ID component (see air_components) year 4-digit year","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_annual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get annual tabulations — air_annual","text":"","code":"if (FALSE) { # \\dontrun{ air_annual(5, 2020) } # }"},{"path":"https://regiohub.github.io/deairdata/reference/air_exceedances.html","id":null,"dir":"Reference","previous_headings":"","what":"Get exceedances data — air_exceedances","title":"Get exceedances data — air_exceedances","text":"air_exceedances() returns exceedances component station month. air_exceedances_types() returns list exceedances types.","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_exceedances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get exceedances data — air_exceedances","text":"","code":"air_exceedances(component, year)  air_exceedances_types()"},{"path":"https://regiohub.github.io/deairdata/reference/air_exceedances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get exceedances data — air_exceedances","text":"component ID component (see air_components) year 4-digit year","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_exceedances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get exceedances data — air_exceedances","text":"","code":"if (FALSE) { # \\dontrun{ air_exceedances(5, 2020) } # }"},{"path":"https://regiohub.github.io/deairdata/reference/air_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all measurements — air_measures","title":"Get all measurements — air_measures","text":"air_measures() returns measures provided parameters. air_measures_date_limits() returns date limits measurements scope, component, station.","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all measurements — air_measures","text":"","code":"air_measures(   date_from,   time_from,   date_to,   time_to,   station = NULL,   component = NULL,   scope = NULL )  air_measures_date_limits()"},{"path":"https://regiohub.github.io/deairdata/reference/air_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all measurements — air_measures","text":"date_from date (\"YYYY-MM-DD\", required use = \"airquality\") time_from hour (1..24) date_to date (\"YYYY-MM-DD\", required use = \"airquality\") time_to hour (1..24) station ID station get data . NULL, include available stations. component ID component. NULL, include available components. scope ID scope. NULL, include available scopes.","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all measurements — air_measures","text":"named list names station IDs element data frame corresponding station","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all measurements — air_measures","text":"","code":"if (FALSE) { # \\dontrun{ air_measures(\"2020-01-01\", 9, \"2020-01-01\", 11) } # }"},{"path":"https://regiohub.github.io/deairdata/reference/air_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata — air_components","title":"Get metadata — air_components","text":"air_components() returns list air components measured. air_networks() returns list air measuring station networks. air_scopes() returns list measurement scopes. air_thresholds() returns list thresholds. air_data_availability() returns list available dates/years.","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata — air_components","text":"","code":"air_components()  air_networks()  air_scopes()  air_thresholds(use, component = NULL, scope = NULL)  air_data_availability(   use = c(\"annualbalance\", \"airquality\", \"measure\"),   date_from = NULL,   time_from = NULL,   date_to = NULL,   time_to = NULL )"},{"path":"https://regiohub.github.io/deairdata/reference/air_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata — air_components","text":"use data \"annualbalance\", \"airquality\", \"measure\" returned? component ID component (see air_components) scope ID scope (see air_scopes) date_from date (\"YYYY-MM-DD\", required use = \"airquality\") time_from hour (1..24) date_to date (\"YYYY-MM-DD\", required use = \"airquality\") time_to hour (1..24)","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_quality.html","id":null,"dir":"Reference","previous_headings":"","what":"Get air quality data — air_quality","title":"Get air quality data — air_quality","text":"air_quality() returns air quality data provided parameters. air_quality_date_limits() returns date limits air quality data station.","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_quality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get air quality data — air_quality","text":"","code":"air_quality(date_from, time_from, date_to, time_to, station = NULL)  air_quality_date_limits()"},{"path":"https://regiohub.github.io/deairdata/reference/air_quality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get air quality data — air_quality","text":"date_from date (\"YYYY-MM-DD\", required use = \"airquality\") time_from hour (1..24) date_to date (\"YYYY-MM-DD\", required use = \"airquality\") time_to hour (1..24) station ID station get data . NULL, include available stations.","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_quality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get air quality data — air_quality","text":"named list names station IDs element nested data frame corresponding station 5 columns: start_dttm, end_dttm: Time start end measuring CET index: Airquality index components is_incomplete: Flag data incomplete (components available) data: List column data frames measured components component: Component ID value: Measured value component index: Airquality index component pct_in_index_thresholds: Decimal representation percent index thresholds. 0.x x percent index 0 1, 1.x x percent index 1 2 etc.","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_quality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get air quality data — air_quality","text":"","code":"if (FALSE) { # \\dontrun{ air_quality(\"2020-01-01\", 9, \"2020-01-01\", 11, station = 7) } # }"},{"path":"https://regiohub.github.io/deairdata/reference/air_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get stations — air_stations","title":"Get stations — air_stations","text":"air_stations() returns list air measuring stations certain use. air_station_settings() returns list station settings. air_station_types() returns list station types.","code":""},{"path":"https://regiohub.github.io/deairdata/reference/air_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get stations — air_stations","text":"","code":"air_stations(   use = c(\"annualbalance\", \"airquality\", \"measure\", \"transgression\"),   date_from = NULL,   time_from = NULL,   date_to = NULL,   time_to = NULL,   return_sf = FALSE )  air_station_settings()  air_station_types()"},{"path":"https://regiohub.github.io/deairdata/reference/air_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get stations — air_stations","text":"use data \"annualbalance\", \"airquality\", \"measure\", \"transgression\" returned? date_from, date_to date (\"YYYY-MM-DD\", required use = \"airquality\") time_from, time_to hour (1..24)","code":""}]
